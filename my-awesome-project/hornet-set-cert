#!/usr/bin/python3

import argparse
import getpass
import logging
import os
import subprocess
import sys

_logger = logging.getLogger('')

def _iterate_hosts(input_file, hosts):
    if input_file:
        with open(input_file, 'rb') as input_file:
            for host in input_file:
                host = host.strip()
                if host:
                    yield host
                    
    for host in hosts:
        yield host.strip()
        
        
def _install_cert(hosts, ssh_password):
    succeeded_hosts = []
    failed_hosts = []
    
    for host in hosts:
        _logger.info("Preparing to access {host}...".format(
            host=host,
        ))
        
        #Prepare a pipe for the password, to prevent sniffing
        (pass_in_fd, pass_out_fd) = os.pipe()
        os.write(pass_out_fd, ssh_password)
        os.close(pass_out_fd)
        try:
            subprocess.check_call((
                'sshpass',
                '-d', str(pass_in_fd),
                'ssh-copy-id',
                '-o', 'StrictHostKeyChecking=no',
                'root@' + host,
            ))
        except Exception as e:
            _logger.error("Unable to install certificate: {error}".format(
                error=e,
            ))
            failed_hosts.append(host)
        else:
            _logger.info("Installed certificate")
            succeeded_hosts.append(host)
        finally:
            os.close(pass_in_fd)
            
    return (succeeded_hosts, failed_hosts)
    
    
if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    
    parser = argparse.ArgumentParser(description='Push SSH certificates to multiple Hornets')
    parser.add_argument(
        '--input', dest='input', default=None,
        help='where to read host addresses, one per line',
    )
    parser.add_argument(
        '--output', dest='output', default=None,
        help='where to write host records for retry purposes',
    )
    parser.add_argument(
        'hosts', metavar='host', nargs='*',
        help='hosts to be attempted in addition to an input file',
    )
    args = parser.parse_args()
    
    (succeeded_hosts, failed_hosts) = _install_cert(
        hosts=_iterate_hosts(args.input, args.hosts),
        ssh_password=getpass.getpass('Hornet SSH password: '),
    )
    succeeded_hosts.sort()
    failed_hosts.sort()
    
    print("\n\n")
    if succeeded_hosts:
        print("Successful:")
        for host in succeeded_hosts:
            print("\t{host}".format(
                host=host,
            ))
        print("")
    if failed_hosts:
        print("Failed:")
        for host in failed_hosts:
            print("\t{host}".format(
                host=host,
            ))
        print("")
        
    if args.output:
        with open(args.output, 'wb') as output:
            for host in failed_hosts:
                output.write(host + '\n')
                
    if failed_hosts:
        _logger.warn("Some hosts did not successfully receive the certificate")
        if args.output:
            _logger.info("{path} may be used as input in a later run".format(
                path=args.output,
            ))
        sys.exit(3)
        
